@using PointerStar.Client.Components;
@using PointerStar.Client.ViewModels;
@using PointerStar.Shared;

@inherits ComponentBase<RoomViewModel>

@page "/room/{RoomId}"

<PageTitle>Pointer*</PageTitle>

<h1>Room @ViewModel.RoomState?.RoomId</h1>

@if (ViewModel.IsFacilitator)
{
    <h2 class="heading">Facilitate</h2>
    <div class="d-flex justify-content-between">
        <div class="d-flex justify-content-start">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" @bind="ViewModel.VotesShown">
                <label class="form-check-label" for="flexSwitchCheckDefault">Show votes</label>
            </div>
            <div class="form-check form-switch" style="margin-left:10px">
                <input class="form-check-input" type="checkbox" @bind="ViewModel.PreviewVotes">
                <label class="form-check-label" for="flexSwitchCheckDefault">Preview votes</label>
            </div>
        </div>
        <div>
            <button class="btn btn-warning" @onclick="ViewModel.ResetVotesAsync">Reset Votes</button>
        </div>
    </div>
}
else if (ViewModel.IsTeamMember)
{
    <h2 class="heading">Vote</h2>
    <div class="container text-center">
        @foreach (string[] rowOptions in (ViewModel.RoomState?.VoteOptions ?? Enumerable.Empty<string>()).Chunk(4))
        {
            <div class="row">
                @foreach (string option in rowOptions)
                {
                    string buttonClass = option == ViewModel.CurrentVote ? "btn-success" : "btn-info";
                    <button class="col-3 col-sm-2 btn btn-lg @buttonClass vote-button" @onclick="() => ViewModel.SubmitVoteAsync(option)">@option</button>
                }
                <div class="w-100"></div>
            </div>
        }
    </div>
}

@{
    var teamMembers = ViewModel.RoomState?.Users.Where(x => x.Role == Role.TeamMember) ?? Enumerable.Empty<User>();
    var facilitators = ViewModel.RoomState?.Users.Where(x => x.Role == Role.Facilitator) ?? Enumerable.Empty<User>();
    var observers = ViewModel.RoomState?.Users.Where(x => x.Role == Role.Observer) ?? Enumerable.Empty<User>();
}
<div class="card border-info mb-3 user-card">
    <div class="card-header">Team Members</div>
    <div class="card-body">
        @if (teamMembers.Any())
        {
            @foreach (var user in teamMembers)
            {
                <p>
                    @user.Name
                    @if (ViewModel.VotesShown && !string.IsNullOrWhiteSpace(user.Vote))
                    {
                        <span> - @user.Vote</span>
                    }
                    else if (ViewModel.IsFacilitator && ViewModel.PreviewVotes)
                    {
                        <span class="vote-preview"> - @user.Vote</span>
                    }
                    else
                    {
                        <span> - ??</span>
                    }
                </p>
            }
        }
        else
        {
            <span>Waiting for team members to join...</span>
        }
    </div>
</div>


@if (facilitators.Any())
{
    <div class="card border-secondary mb-3 user-card">
        <div class="card-header">Facilitators</div>
        <div class="card-body">
            @foreach (var user in facilitators)
            {
                <p>@user.Name</p>
            }
        </div>
    </div>
}
@if (observers.Any())
{
    <div class="card border-dark mb-3 user-card">
        <div class="card-header">Observers</div>
        <div class="card-body">
            @foreach (var user in observers)
            {
                <p>@user.Name</p>
            }
        </div>
    </div>
}


@code {
    [Parameter]
    public string? RoomId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "Name")]
    public string? Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (RoomId is { } roomId)
        {
            User user = new(Guid.NewGuid(), Name ?? $"User {new Random().Next()}");
            await ViewModel.JoinRoomAsync(roomId, user);
        }
    }
}
