@using PointerStar.Client.Components;
@using PointerStar.Client.ViewModels;
@using PointerStar.Shared;

@inherits ComponentBase<RoomViewModel>

@page "/room/{RoomId}"

<PageTitle>Pointer*</PageTitle>

<h1>Room @ViewModel.RoomState?.RoomId</h1>

@if (ViewModel.IsFacilitator)
{
    <h2 class="heading">Facilitate</h2>
    <div class="d-flex justify-content-between">
        <div class="d-flex justify-content-start">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" @bind="ViewModel.VotesShown">
                <label class="form-check-label" for="flexSwitchCheckDefault">Show votes</label>
            </div>
            <div class="form-check form-switch" style="margin-left:10px">
                <input class="form-check-input" type="checkbox" @bind="ViewModel.PreviewVotes">
                <label class="form-check-label" for="flexSwitchCheckDefault">Preview votes</label>
            </div>
        </div>
        <div>
            <button class="btn btn-warning" @onclick="ViewModel.ResetVotesAsync">Reset Votes</button>
        </div>
    </div>
}
else if (ViewModel.IsTeamMember)
{
    <h2 class="heading">Vote</h2>
    <div class="container text-center">
        @foreach (string[] rowOptions in (ViewModel.RoomState?.VoteOptions ?? Enumerable.Empty<string>()).Chunk(4))
        {
            <div class="row">
                @foreach (string option in rowOptions)
                {
                    string buttonClass = option == ViewModel.CurrentVote ? "btn-success" : "btn-info";
                    <button class="col-3 col-sm-2 btn btn-lg @buttonClass vote-button" @onclick="() => ViewModel.SubmitVoteAsync(option)">@option</button>
                }
                <div class="w-100"></div>
            </div>
        }
    </div>
}

<div class="card border-info mb-3 user-card">
    <div class="card-header">Team Members</div>
    <div class="card-body">
        @foreach (var user in ViewModel.RoomState?.Users ?? Enumerable.Empty<User>())
        {
            <p>
                @user.Name
                @if (ViewModel.VotesShown && !string.IsNullOrWhiteSpace(user.Vote))
                {
                    <span> - @user.Vote</span>
                }
                else if (ViewModel.IsFacilitator && ViewModel.PreviewVotes)
                {
                    <span class="vote-preview"> - @user.Vote</span>
                }
                else
                {
                    <span> - ??</span>
                }
            </p>
        }
    </div>
</div>

<div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay; overflow-y: auto;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">                        
                        <input type="text" class="form-control" id="nameInput" placeholder="Enter your name" @bind="Name">
                    </div>
                    <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="joinRoom">Join</button>
                </form>
            </div>
            <div class="modal-footer">
                @Footer
            </div>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public RenderFragment? Title { get; set; } = new RenderFragment(builder => builder.AddContent(0, "Please Enter Your Name"));

    [Parameter]
    public RenderFragment? Body { get; set; }

    [Parameter]
    public RenderFragment? Footer { get; set; }

    private string modalDisplay = "none;";
    private string modalClass = "";
    private bool showBackdrop = false;

    public void Open()
    {
        IsModalOpen = true;
        modalDisplay = "block;";
        modalClass = "show";
        showBackdrop = true;
    }

    public void Close()
    {
        IsModalOpen = false;
        modalDisplay = "none";
        modalClass = "";
        showBackdrop = false;
    }

    private bool IsModalOpen { get; set; }

    [Parameter]
    public string? RoomId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "Name")]
    public string? Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (RoomId is { } roomId)
        {
            if(string.IsNullOrEmpty(Name))
            {
                Open();
            }
            else
            {
                await joinRoom();
            }
        }
    }

    private async Task joinRoom()
    {
        if(IsModalOpen)
        {
            Close();
        }

        User user = new(Guid.NewGuid(), Name ?? $"User {new Random().Next()}");
        if(RoomId is { } roomId)
        {
            await ViewModel.JoinRoomAsync(roomId, user);
        }
    }
}
