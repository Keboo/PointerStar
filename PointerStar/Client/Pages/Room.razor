@using PointerStar.Client.Components;
@using PointerStar.Client.ViewModels;
@using PointerStar.Shared;

@inherits ComponentBase<RoomViewModel>
@inject NavigationManager Navigation

@page "/room/{RoomId}"

<PageTitle>Pointer*</PageTitle>

<MudGrid>
    <MudItem xs="2">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">Room: @ViewModel.RoomId</MudPaper>
    </MudItem>
    <MudItem xs="2">
        <MudButton Class="d-flex align-center justify-center mud-width-full py-8" Variant="Variant.Outlined">Copy Invitation URL</MudButton>
    </MudItem>
    <MudItem xs="8">
        <MudButton Class="d-flex align-center justify-center mud-width-full py-8" Variant="Variant.Outlined"
                   OnClick="() => ViewModel.ShowUserDialogAsync()">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Title="Edit" />
            @ViewModel.Name
        </MudButton>

    </MudItem>
    <MudItem xs="12">
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />
    </MudItem>

    @if (ViewModel.IsTeamMember)
    {
        <MudItem xs="12">
            <MudStack Justify="Justify.Center" Row="true">
                @foreach (string[] rowOptions in (ViewModel.RoomState?.VoteOptions ?? Enumerable.Empty<string>()).Chunk(4))
                {
                    foreach (string option in rowOptions)
                    {
                        Color color = option == ViewModel.CurrentVote ? Color.Success : Color.Primary;
                        <MudButton Variant="Variant.Filled" Color="color" Class="vote-button" OnClick="() => ViewModel.SubmitVoteAsync(option)">@option</MudButton>
                    }
                }
            </MudStack>
        </MudItem>
    }

    @if (ViewModel.IsFacilitator)
    {
        <MudItem xs="12">
            <MudStack Justify="Justify.FlexStart" Row="true">
                <MudSwitch @bind-Checked="@ViewModel.VotesShown" Label="Show votes" Color="Color.Success" />
                <MudSwitch @bind-Checked="@ViewModel.AutoShowVotes" Label="Automatically reveal votes" Color="Color.Info" />
                <MudSwitch @bind-Checked="@ViewModel.PreviewVotes" Label="Preview votes" Color="Color.Info" />
                <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="ViewModel.ResetVotesAsync">Reset Votes</MudButton>
            </MudStack>
        </MudItem>
    }

    @{
        var teamMembers = ViewModel.RoomState?.TeamMemebers ?? Enumerable.Empty<User>();
        var facilitators = ViewModel.RoomState?.Facilitators ?? Enumerable.Empty<User>();
        var observers = ViewModel.RoomState?.Observers ?? Enumerable.Empty<User>();
    }

    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Team Members</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudStack Row=true>
                    <MudStack>
                        @if (teamMembers.Any())
                        {
                            @foreach (var user in teamMembers)
                            {
                                <MudText>
                                    @user.Name
                                    @if (ViewModel.VotesShown && !string.IsNullOrWhiteSpace(user.Vote))
                                    {
                                        <span> - </span>
                                        if (!string.IsNullOrWhiteSpace(user.OriginalVote) && user.OriginalVote != user.Vote)
                                        {
                                            <span class="original-vote-value">(@user.OriginalVote) </span>
                                        }
                                        <span class="vote-value">@user.Vote</span>
                                    }
                                    else if ((ViewModel.IsFacilitator || ViewModel.IsObserver) && ViewModel.PreviewVotes)
                                    {
                                        <span class="vote-preview"> - @(string.IsNullOrEmpty(user.Vote) ? "…" : @user.Vote)</span>
                                    }
                                    else
                                    {
                                        <span> - @(string.IsNullOrEmpty(user.Vote) ? "…" : "✓")</span>
                                    }
                                </MudText>
                            }
                        }
                        else
                        {
                            <MudText>Waiting for team members to join...</MudText>
                        }
                    </MudStack>
                    @if (ViewModel.VotesShown && ViewModel.RoomState is { } roomState)
                    {
                        var votes = teamMembers.Select(x => x.Vote).ToArray() ?? Array.Empty<string>();
                        var groupedVotes = votes
                            .GroupBy(x => x)
                            .OrderByDescending(x => x.Count()).ToArray();
                        int? maxVote = groupedVotes.Any() ? groupedVotes.Select(x => x.Count()).Max() : null;
                        int fontSize = 0;
                        @if (maxVote is not null)
                        {
                            var percentageOfVote = (double)maxVote / teamMembers.Count();
                            fontSize = percentageOfVote switch
                            {
                                >= 1.0 => 20,
                                >= 0.9 => 16,
                                >= 0.7 => 12,
                                > 0.5 => 10,
                                _ => 0
                            };
                        }

                        @* <MudChart ChartType="ChartType.Donut" LegendPosition="Position.Bottom" Width="200px" Height="200px"
                                  InputData="@groupedVotes.Select(x => (double)x.Count()).ToArray()"
                                  InputLabels="@groupedVotes.Select(x => x.Key).ToArray()"
                                  >
                            <CustomGraphics>
                                <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="var(--mud-palette-text-primary)" font-family="Helvetica" font-size="@fontSize">@groupedVotes.FirstOrDefault()?.Key</text>
                            </CustomGraphics>
                        </MudChart> *@

                    }
                </MudStack>

            </MudCardContent>
        </MudCard>
    </MudItem>

    @if (facilitators.Any())
    {
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Facilitators</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @foreach (var user in facilitators)
                    {
                        <MudText>@user.Name</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    }

    @if (observers.Any())
    {
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Observers</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @foreach (var user in observers)
                    {
                        <MudText>@user.Name</MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    }

</MudGrid>

@code {

    [Parameter]
    public string? RoomId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "Name")]
    public string? Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ViewModel.Name = Name;
        ViewModel.RoomId = RoomId;
        await base.OnInitializedAsync();
    }

    private async void OnKeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await ViewModel.SubmitDialogAsync();
        }
    }
}
